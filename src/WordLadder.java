import java.io.File;
import java.io.FileNotFoundException;
import java.time.Duration;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author FRANCESCO
 */
public class WordLadder extends javax.swing.JFrame {
    
    private ArrayList<String> wordList = new ArrayList<>();
    
    private DefaultTableModel tableModel;

    /**
     * Creates new form WordLadder
     */
    public WordLadder() {
        initComponents();
        
        setSize(1000, 600); 
        
        loadWordListFromFile("data.txt");
        
        tableModel = new DefaultTableModel();

        tableModel.addColumn("ANSWER");

        jTable1.setModel(tableModel);

        jTable1.setShowVerticalLines(false);
        jTable1.setShowHorizontalLines(false);

        jTable1.setRowHeight(40);

    }
    
    private void loadWordListFromFile(String filePath) {
        try {
            File file = new File(filePath);
            Scanner fileReader = new Scanner(file);
            while(fileReader.hasNextLine()) {
                String data = fileReader.nextLine();
                wordList.add(data);
            }
            fileReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        Question = new javax.swing.JPanel();
        SearchButton = new javax.swing.JButton();
        EndLabel = new javax.swing.JLabel();
        StartLabel = new javax.swing.JLabel();
        StartInput = new javax.swing.JTextField();
        EndInput = new javax.swing.JTextField();
        AlgorithmChoice = new javax.swing.JComboBox<>();
        AlgorithmLabel = new javax.swing.JLabel();
        ErrorInputMessage = new javax.swing.JLabel();
        ProcessingLabel = new javax.swing.JLabel();
        Answer = new javax.swing.JPanel();
        TableAnswer = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        NodeLabel = new javax.swing.JLabel();
        DurationLabel = new javax.swing.JLabel();
        LengthLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        Title.setBackground(new java.awt.Color(255, 255, 255));
        Title.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("WORD LADDER");

        Question.setBackground(new java.awt.Color(0, 0, 0));

        SearchButton.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        SearchButton.setText("SEARCH");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        EndLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        EndLabel.setForeground(new java.awt.Color(255, 255, 255));
        EndLabel.setText("End");

        StartLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        StartLabel.setForeground(new java.awt.Color(255, 255, 255));
        StartLabel.setText("Start");

        StartInput.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        StartInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartInputActionPerformed(evt);
            }
        });

        EndInput.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        EndInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndInputActionPerformed(evt);
            }
        });

        AlgorithmChoice.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        AlgorithmChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "UCS", "Greedy Best First Search", "A*" }));
        AlgorithmChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmChoiceActionPerformed(evt);
            }
        });

        AlgorithmLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        AlgorithmLabel.setForeground(new java.awt.Color(255, 255, 255));
        AlgorithmLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AlgorithmLabel.setText("Select Algorithm");

        ErrorInputMessage.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        ErrorInputMessage.setForeground(new java.awt.Color(255, 51, 0));
        ErrorInputMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorInputMessage.setText("PLEASE INPUT THE CORRECT WORD!!!");

        ProcessingLabel.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        ProcessingLabel.setForeground(new java.awt.Color(255, 255, 255));
        ProcessingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProcessingLabel.setText("Processing...");

        javax.swing.GroupLayout QuestionLayout = new javax.swing.GroupLayout(Question);
        Question.setLayout(QuestionLayout);
        QuestionLayout.setHorizontalGroup(
            QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QuestionLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProcessingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AlgorithmChoice, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AlgorithmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(QuestionLayout.createSequentialGroup()
                        .addGroup(QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(StartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EndLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StartInput, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EndInput, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ErrorInputMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        QuestionLayout.setVerticalGroup(
            QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QuestionLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StartLabel))
                .addGap(25, 25, 25)
                .addGroup(QuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EndLabel)
                    .addComponent(EndInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(AlgorithmLabel)
                .addGap(18, 18, 18)
                .addComponent(AlgorithmChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(ErrorInputMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProcessingLabel)
                .addGap(33, 33, 33))
        );

        ErrorInputMessage.setVisible(false);
        ProcessingLabel.setVisible(false);

        Answer.setBackground(new java.awt.Color(0, 0, 0));

        TableAnswer.setBackground(new java.awt.Color(0, 0, 0));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "ANSWER"
            }
        ));
        TableAnswer.setViewportView(jTable1);

        NodeLabel.setBackground(new java.awt.Color(0, 0, 0));
        NodeLabel.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        NodeLabel.setForeground(new java.awt.Color(255, 255, 255));
        NodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NodeLabel.setText("The duration is 198 milliseconds");
        NodeLabel.setToolTipText("");

        DurationLabel.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        DurationLabel.setForeground(new java.awt.Color(255, 255, 255));
        DurationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DurationLabel.setText("Visited 28 Nodes");
        DurationLabel.setToolTipText("");

        LengthLabel.setBackground(new java.awt.Color(0, 0, 0));
        LengthLabel.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        LengthLabel.setForeground(new java.awt.Color(255, 255, 255));
        LengthLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LengthLabel.setText("The length is 5");
        LengthLabel.setToolTipText("");

        javax.swing.GroupLayout AnswerLayout = new javax.swing.GroupLayout(Answer);
        Answer.setLayout(AnswerLayout);
        AnswerLayout.setHorizontalGroup(
            AnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AnswerLayout.createSequentialGroup()
                .addGroup(AnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TableAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(DurationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LengthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(AnswerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );
        AnswerLayout.setVerticalGroup(
            AnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AnswerLayout.createSequentialGroup()
                .addComponent(TableAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(LengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        NodeLabel.setVisible(false);
        DurationLabel.setVisible(false);
        LengthLabel.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(241, 241, 241)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(Question, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(Answer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Title)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(Answer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Question, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void AlgorithmChoiceActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void EndInputActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void StartInputActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        
        String source = StartInput.getText();
        String destination = EndInput.getText();

        
        if(source.isEmpty() || destination.isEmpty()) {
            ErrorInputMessage.setText("Please enter both start and end word.");
            ErrorInputMessage.setVisible(true);
            ErrorInputMessage.revalidate(); // Refresh the display
            return;
        }

        if (!(wordList.contains(source) && wordList.contains(destination))) {
            ErrorInputMessage.setText("Start or End is not in the word list.");
            ErrorInputMessage.setVisible(true);
            ErrorInputMessage.revalidate(); // Refresh the display
            return;
        }

        if (source.length() != destination.length()) {
            ErrorInputMessage.setText("The length must be same!!!");
            ErrorInputMessage.setVisible(true);
            ErrorInputMessage.revalidate(); // Refresh the display
            return;
        }
        
        ArrayList<String> newWordList = new ArrayList<String>();

        for(String data : wordList) {
            if(data.length()  == source.length()) {
                newWordList.add(data);
            }
        }
        
        ErrorInputMessage.setVisible(false);
        executeAlgorithm(source, destination, newWordList);
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WordLadder MyWordLadder = new WordLadder();
        MyWordLadder.setVisible(true);
    }
    
    private void executeAlgorithm(String source, String destination, ArrayList<String> wordList) {
        ArrayList<String> ans = new ArrayList<String>();
        int nodeVisited = 0;
        LocalTime startTime = LocalTime.now();
        ProcessingLabel.setVisible(true);

        String algorithm = (String) AlgorithmChoice.getSelectedItem();

        switch (algorithm) {
            case "UCS":
                // UCS
                UCS ucs = new UCS(wordList);
                ans = ucs.shortestPath(source, destination);
                nodeVisited = ucs.getNodeVisited();
                break;
            case "Greedy Best First Search":
                // GBFS
                GBFS gbfs = new GBFS(wordList);
                ans = gbfs.shortestPath(source, destination);
                nodeVisited = gbfs.getNodeVisited();
                break;
            case "A*":
                // A Star
                AStar aStar = new AStar(wordList);
                ans = aStar.shortestPath(source, destination);
                nodeVisited = aStar.getNodeVisited();
                break;
            default:
                break;
        }

        LocalTime endTime = LocalTime.now();
        ProcessingLabel.setVisible(false);

        Duration duration = Duration.between(startTime, endTime);
        long milliseconds = duration.toMillis();

        LengthLabel.setText("The length is " + ans.size());
        DurationLabel.setText("The duration is " + milliseconds + " milliseconds");
        NodeLabel.setText("Visited " + nodeVisited + " Nodes");
        DurationLabel.setVisible(true);
        NodeLabel.setVisible(true);
        if (ans == null) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[]{"No path"});
            TableAnswer.setVisible(true);
        } else {
            TableAnswer.setVisible(true);
            LengthLabel.setVisible(true);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Clear the table before adding new data
            for (String data : ans) {
                model.addRow(new Object[]{data});
            }
        }
    }


    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> AlgorithmChoice;
    private javax.swing.JLabel AlgorithmLabel;
    private javax.swing.JPanel Answer;
    private javax.swing.JLabel DurationLabel;
    private javax.swing.JTextField EndInput;
    private javax.swing.JLabel EndLabel;
    private javax.swing.JLabel ErrorInputMessage;
    private javax.swing.JLabel LengthLabel;
    private javax.swing.JLabel NodeLabel;
    private javax.swing.JLabel ProcessingLabel;
    private javax.swing.JPanel Question;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField StartInput;
    private javax.swing.JLabel StartLabel;
    private javax.swing.JScrollPane TableAnswer;
    private javax.swing.JLabel Title;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}
